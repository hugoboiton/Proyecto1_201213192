/* Generated By:JavaCC: Do not edit this line. analizadorConstants.java */
package Analizador;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface analizadorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int lienzo = 11;
  /** RegularExpression Id. */
  int publico = 12;
  /** RegularExpression Id. */
  int privado = 13;
  /** RegularExpression Id. */
  int protegido = 14;
  /** RegularExpression Id. */
  int extiende = 15;
  /** RegularExpression Id. */
  int conservar = 16;
  /** RegularExpression Id. */
  int var = 17;
  /** RegularExpression Id. */
  int si = 18;
  /** RegularExpression Id. */
  int sino = 19;
  /** RegularExpression Id. */
  int comprobar = 20;
  /** RegularExpression Id. */
  int caso = 21;
  /** RegularExpression Id. */
  int defecto = 22;
  /** RegularExpression Id. */
  int salir = 23;
  /** RegularExpression Id. */
  int continuar = 24;
  /** RegularExpression Id. */
  int para = 25;
  /** RegularExpression Id. */
  int mientras = 26;
  /** RegularExpression Id. */
  int hacer = 27;
  /** RegularExpression Id. */
  int retornar = 28;
  /** RegularExpression Id. */
  int entero = 29;
  /** RegularExpression Id. */
  int decimal = 30;
  /** RegularExpression Id. */
  int booleano = 31;
  /** RegularExpression Id. */
  int caracter = 32;
  /** RegularExpression Id. */
  int cadena = 33;
  /** RegularExpression Id. */
  int arreglo = 34;
  /** RegularExpression Id. */
  int pintarP = 35;
  /** RegularExpression Id. */
  int pintarOR = 36;
  /** RegularExpression Id. */
  int pintarS = 37;
  /** RegularExpression Id. */
  int principal = 38;
  /** RegularExpression Id. */
  int ordenar = 39;
  /** RegularExpression Id. */
  int asendente = 40;
  /** RegularExpression Id. */
  int descendente = 41;
  /** RegularExpression Id. */
  int pares = 42;
  /** RegularExpression Id. */
  int impares = 43;
  /** RegularExpression Id. */
  int primos = 44;
  /** RegularExpression Id. */
  int igualigual = 45;
  /** RegularExpression Id. */
  int diferente = 46;
  /** RegularExpression Id. */
  int menor = 47;
  /** RegularExpression Id. */
  int menorigual = 48;
  /** RegularExpression Id. */
  int mayor = 49;
  /** RegularExpression Id. */
  int mayorigual = 50;
  /** RegularExpression Id. */
  int nulo = 51;
  /** RegularExpression Id. */
  int or = 52;
  /** RegularExpression Id. */
  int and = 53;
  /** RegularExpression Id. */
  int nand = 54;
  /** RegularExpression Id. */
  int nor = 55;
  /** RegularExpression Id. */
  int xor = 56;
  /** RegularExpression Id. */
  int not = 57;
  /** RegularExpression Id. */
  int mas = 58;
  /** RegularExpression Id. */
  int menos = 59;
  /** RegularExpression Id. */
  int por = 60;
  /** RegularExpression Id. */
  int divi = 61;
  /** RegularExpression Id. */
  int potencia = 62;
  /** RegularExpression Id. */
  int aumento = 63;
  /** RegularExpression Id. */
  int decremento = 64;
  /** RegularExpression Id. */
  int sumas = 65;
  /** RegularExpression Id. */
  int restas = 66;
  /** RegularExpression Id. */
  int verdadero = 67;
  /** RegularExpression Id. */
  int falso = 68;
  /** RegularExpression Id. */
  int cadenaS = 69;
  /** RegularExpression Id. */
  int cadenaC = 70;
  /** RegularExpression Id. */
  int ide = 71;
  /** RegularExpression Id. */
  int numero = 72;
  /** RegularExpression Id. */
  int abrir = 73;
  /** RegularExpression Id. */
  int cerrar = 74;
  /** RegularExpression Id. */
  int parentecisa = 75;
  /** RegularExpression Id. */
  int parentecisc = 76;
  /** RegularExpression Id. */
  int corchetea = 77;
  /** RegularExpression Id. */
  int corchetec = 78;
  /** RegularExpression Id. */
  int puntoycoma = 79;
  /** RegularExpression Id. */
  int coma = 80;
  /** RegularExpression Id. */
  int punto = 81;
  /** RegularExpression Id. */
  int igual = 82;
  /** RegularExpression Id. */
  int fin = 83;
  /** RegularExpression Id. */
  int llavea = 84;
  /** RegularExpression Id. */
  int llavec = 85;
  /** RegularExpression Id. */
  int dospuntos = 86;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\">>\"",
    "\"<-\"",
    "\"\\n\"",
    "<token of kind 8>",
    "\"->\"",
    "<token of kind 10>",
    "\"Lienzo\"",
    "\"publico\"",
    "\"privado\"",
    "\"protegido\"",
    "\"extiende\"",
    "\"Conserva\"",
    "\"var\"",
    "\"si\"",
    "\"sino\"",
    "\"comprobar\"",
    "\"caso\"",
    "\"defecto\"",
    "\"salir\"",
    "\"continuar\"",
    "\"para\"",
    "\"mientras\"",
    "\"hacer\"",
    "\"retorna\"",
    "<entero>",
    "<decimal>",
    "<booleano>",
    "<caracter>",
    "<cadena>",
    "<arreglo>",
    "\"Pintar_P\"",
    "\"Pintar_OR\"",
    "\"Pintar_S\"",
    "\"Principal\"",
    "\"Ordenar\"",
    "\"ascendente\"",
    "\"descendente\"",
    "\"pares\"",
    "\"impares\"",
    "\"primos\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!&\\u00a1\"",
    "\"||\"",
    "\"&&\"",
    "\"!&&\"",
    "\"!||\"",
    "\"&|\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"++\"",
    "\"--\"",
    "\"+=\"",
    "\"-=\"",
    "<verdadero>",
    "<falso>",
    "<cadenaS>",
    "<cadenaC>",
    "<ide>",
    "<numero>",
    "\"\\u00bf\"",
    "\"?\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"$\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
  };

}
