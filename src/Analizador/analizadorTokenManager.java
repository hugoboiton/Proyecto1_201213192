/* Generated By:JavaCC: Do not edit this line. analizadorTokenManager.java */
package Analizador;

/** Token Manager. */
public class analizadorTokenManager implements analizadorConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x20005L) != 0L)
            return 22;
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 71;
            return 11;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 71;
            return 78;
         }
         if ((active0 & 0x1310000L) != 0L)
         {
            jjmatchedKind = 71;
            return 90;
         }
         if ((active0 & 0x20000400000L) != 0L)
         {
            jjmatchedKind = 71;
            return 66;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 71;
            return 40;
         }
         if ((active0 & 0x1cf81e8c7800L) != 0L)
         {
            jjmatchedKind = 71;
            return 20;
         }
         return -1;
      case 1:
         if ((active0 & 0x20000400000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 65;
         }
         if ((active0 & 0x1df81f93f800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 20;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 89;
         }
         if ((active0 & 0xc0000L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0x1df81ff9f800L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
            return 20;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
            return 70;
         }
         if ((active0 & 0x20000L) != 0L)
            return 20;
         return -1;
      case 3:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
            return 69;
         }
         if ((active0 & 0x2280000L) != 0L)
            return 20;
         if ((active0 & 0x1df81dd1f800L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
            return 20;
         }
         return -1;
      case 4:
         if ((active0 & 0x1bf81551f800L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
            return 20;
         }
         if ((active0 & 0x40008800000L) != 0L)
            return 20;
         return -1;
      case 5:
         if ((active0 & 0xbf81551f000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
            return 20;
         }
         if ((active0 & 0x100000000800L) != 0L)
            return 20;
         return -1;
      case 6:
         if ((active0 & 0x3800000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x3400511c000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
            return 20;
         }
         if ((active0 & 0x88010403000L) != 0L)
            return 20;
         return -1;
      case 7:
         if ((active0 & 0x34001104000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
            return 20;
         }
         if ((active0 & 0x3800000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x4018000L) != 0L)
            return 20;
         return -1;
      case 8:
         if ((active0 & 0x30000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
            return 20;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x4001104000L) != 0L)
            return 20;
         return -1;
      case 9:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 9;
            return 20;
         }
         if ((active0 & 0x10000000000L) != 0L)
            return 20;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0xc8400000000000L, 0x0L);
      case 36:
         return jjStopAtPos(0, 83);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x120000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 75);
      case 41:
         return jjStopAtPos(0, 76);
      case 42:
         return jjStopAtPos(0, 60);
      case 43:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x2L);
      case 44:
         return jjStopAtPos(0, 80);
      case 45:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x5L);
      case 46:
         return jjStartNfaWithStates_0(0, 81, 22);
      case 47:
         return jjStopAtPos(0, 61);
      case 58:
         return jjStopAtPos(0, 86);
      case 59:
         return jjStopAtPos(0, 79);
      case 60:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x1000000000040L, 0x0L);
      case 61:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 62:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x4000000000020L, 0x0L);
      case 63:
         return jjStopAtPos(0, 74);
      case 91:
         return jjStopAtPos(0, 77);
      case 93:
         return jjStopAtPos(0, 78);
      case 94:
         return jjStopAtPos(0, 62);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1310000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x20000400000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x147802007000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8c0000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 84);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 85);
      case 191:
         return jjStopAtPos(0, 73);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         return jjMoveStringLiteralDfa2_0(active0, 0x48000000000000L, active1, 0L);
      case 43:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 45:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 61:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 62:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000aa20000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20010400000L, active1, 0L);
      case 73:
      case 105:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3804080800L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1110000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10c000006000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 124:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 54);
         break;
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x10008000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000800L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x104000002000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x3801090000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 82:
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x40002000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000200000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x10008000L);
      case 124:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(2, 55);
         break;
      case 161:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x58008400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x808000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4004000800L);
      case 79:
      case 111:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 20);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x3801004000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x3800002000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000400000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000001c000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1001000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 82:
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 20);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x80010100000L);
      case 83:
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 20);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000002000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x20011008000L);
      case 79:
      case 111:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 20);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x3804010000L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 20);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x3800000000L);
      case 65:
      case 97:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 20);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000008000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 79:
      case 111:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 20);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 20);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 20);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 20);
         break;
      case 83:
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 20);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 20);
         return jjMoveStringLiteralDfa8_0(active0, 0x4001100000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 69:
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 20);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 80:
      case 112:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(7, 35);
         break;
      case 83:
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 20);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(7, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 20);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      case 79:
      case 111:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 20);
         break;
      case 82:
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 20, 20);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 20);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(8, 36);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 20);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 106;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 72)
                        kind = 72;
                     jjCheckNAddTwoStates(22, 23);
                  }
                  else if ((0x600000000000L & l) != 0L)
                     jjCheckNAdd(22);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 34)
                     jjCheckNAdd(14);
                  break;
               case 69:
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(20);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(20);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(20);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(20);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(20);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(20);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(20);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(20);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(20);
                  break;
               case 13:
                  if (curChar == 34)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 34 && kind > 69)
                     kind = 69;
                  break;
               case 16:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if (curChar == 39 && kind > 70)
                     kind = 70;
                  break;
               case 21:
                  if ((0x600000000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 46)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAdd(24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(20);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(0, 3);
                  else if ((0x2000000020L & l) != 0L)
                     jjAddStates(4, 5);
                  else if ((0x1000000010L & l) != 0L)
                     jjAddStates(6, 7);
                  else if ((0x400000004L & l) != 0L)
                     jjAddStates(8, 9);
                  else if ((0x200000002L & l) != 0L)
                     jjAddStates(10, 11);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(12, 13);
                  else if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 69:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(20);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 78:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(20);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 40:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(20);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 66:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(20);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 89:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(20);
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 65:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(20);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 70:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(20);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(20);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 90:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(20);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 0:
                  if ((0x2000000020L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 1:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x800000008000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 5:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  jjAddStates(14, 15);
                  break;
               case 17:
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(20);
                  break;
               case 25:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 26:
                  if ((0x800000008000L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 27:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 31:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x200000002L & l) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 35:
                  if ((0x800000008000L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 36:
               case 41:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 37:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 42:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x400000004L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 47:
                  if ((0x800000008000L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 48:
               case 54:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 49:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 55:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(6, 7);
                  break;
               case 61:
                  if ((0x100000001000L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 62:
               case 67:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 63:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 68:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 71:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(4, 5);
                  break;
               case 74:
                  if ((0x800000008000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 75:
               case 79:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(74);
                  break;
               case 76:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 80:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(0, 3);
                  break;
               case 84:
                  if ((0x4000000040000L & l) != 0L && kind > 32)
                     kind = 32;
                  break;
               case 85:
               case 91:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 86:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 92:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x200000002L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 98:
               case 102:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(97);
                  break;
               case 99:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 103:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(14, 15);
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 106 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 7);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_2(0x200L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   90, 96, 101, 105, 78, 82, 66, 72, 53, 59, 40, 45, 29, 33, 14, 15, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\75\75", "\41\75", "\74", "\74\75", "\76", "\76\75", 
"\41\46\241", "\174\174", "\46\46", "\41\46\46", "\41\174\174", "\46\174", "\41", "\53", 
"\55", "\52", "\57", "\136", "\53\53", "\55\55", "\53\75", "\55\75", null, null, null, 
null, null, null, "\277", "\77", "\50", "\51", "\133", "\135", "\73", "\54", "\56", 
"\75", "\44", "\173", "\175", "\72", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "SINGLE_LINE_COMMENT",
   "MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 2, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff801L, 0x7fffffL, 
};
static final long[] jjtoSkip = {
   0x2feL, 0x0L, 
};
static final long[] jjtoMore = {
   0x500L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[106];
private final int[] jjstateSet = new int[212];
protected char curChar;
/** Constructor. */
public analizadorTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public analizadorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 106; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 10)
         {
            jjmatchedKind = 10;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
