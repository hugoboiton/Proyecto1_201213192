/* Generated By:JavaCC: Do not edit this line. analizador.java */
package Analizador;

public class analizador implements analizadorConstants {
  public static void main(String args []) throws ParseException
  {
      analizador parser = new analizador(System.in);

      try
      {
        parser.S();
        System.out.println("correcto");
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());

      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());

      }

  }

// inicio gramatica
  final public nodo S() throws ParseException {
          nodo e1;
    e1 = L();
    jj_consume_token(0);
                    nodo sint = new nodo();
                    sint.setEtiqueta("S");
                    nodo ini=(nodo) e1;
                    sint.agregarHijo(ini);
                    {if (true) return sint;}
    throw new Error("Missing return statement in function");
  }

  final public nodo L() throws ParseException {
 nodo sint;
String tnivel="publico";
 nodo herencia=null;
 nodo conte;
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case publico:
    case privado:
    case protegido:
      tnivel = nivel();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(lienzo);
    t = jj_consume_token(ide);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case extiende:
      herencia = extiende();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(abrir);
    conte = cuerpo();
    jj_consume_token(cerrar);
       sint =new nodo();
       sint.setEtiqueta("Lienzo");
       sint.setNivel(tnivel);
       sint.setValor(t.image.toString());
       if(herencia!=null){
       sint.agregarHijo(herencia);}
       sint.agregarHijo(conte);
       // System.out.println(tnivel); 
       {if (true) return sint;}
    throw new Error("Missing return statement in function");
  }

 //niveles de pribilegio
  final public String nivel() throws ParseException {
                String aux; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case publico:
      t = jj_consume_token(publico);
      break;
    case privado:
      t = jj_consume_token(privado);
      break;
    case protegido:
      t = jj_consume_token(protegido);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     aux=t.image.toString();
    {if (true) return aux;}
    throw new Error("Missing return statement in function");
  }

//herencia
  final public nodo extiende() throws ParseException {
   nodo raiz;
   nodo hijo;
   Token t;
    jj_consume_token(extiende);
    t = jj_consume_token(ide);
      raiz =new nodo();
      raiz.setEtiqueta("Extiende");
      hijo =new nodo();
      hijo.setEtiqueta(t.image.toString());
      raiz.agregarHijo(hijo);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(coma);
      t = jj_consume_token(ide);
       hijo =new nodo();
      hijo.setEtiqueta(t.image.toString());
      raiz.agregarHijo(hijo);
    }
    {if (true) return raiz;}
    throw new Error("Missing return statement in function");
  }

// cuerpo del lienzo
  final public nodo cuerpo() throws ParseException {
       nodo r=new nodo();
       r.setEtiqueta("cuerpo");
       nodo hijo;
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        hijo = MetodoFuncion();
        r.agregarHijo(hijo);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case publico:
        case privado:
        case protegido:
        case conservar:
        case var:
        case ide:
          hijo = V();
     r.agregarHijo(hijo);
          break;
        case principal:
          hijo = principal();
     r.agregarHijo(hijo);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case publico:
      case privado:
      case protegido:
      case conservar:
      case var:
      case entero:
      case decimal:
      case booleano:
      case caracter:
      case cadena:
      case principal:
      case ide:
      case corchetea:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
    }
   {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo V() throws ParseException {
          nodo r;
    //LOOKAHEAD(2) 
            r = variable();
    jj_consume_token(fin);
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// declaracion de variables
  final public nodo variable() throws ParseException {
                 nodo r; String tipo,nivelv="publico"; nodo hijo; nodo e=null;nodo tamano=null;nodo valor=null;Token t,t1=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case publico:
    case privado:
    case protegido:
    case conservar:
    case var:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case publico:
      case privado:
      case protegido:
        nivelv = nivel();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case conservar:
        jj_consume_token(conservar);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(var);
      tipo = tipoVariable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case arreglo:
        t1 = jj_consume_token(arreglo);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      t = jj_consume_token(ide);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case corchetea:
        tamano = tamanoV();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case igual:
        jj_consume_token(igual);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case verdadero:
        case falso:
        case cadenaS:
        case cadenaC:
        case ide:
        case numero:
        case parentecisa:
          e = E();
          break;
        case llavea:
          valor = valoresV();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
        r=new nodo();
        r.setEtiqueta("variables");
       // hijo=new nodo();

       if(t1==null){
         hijo=new nodo();
         hijo.setEtiqueta("variable");
         hijo.setTipo(tipo);
         hijo.setValor(t.image.toString());
         hijo.setNivel(nivelv);
         if(e!=null){
         hijo.agregarHijo(e);
         }
         r.agregarHijo(hijo);

         }else{
         hijo=new nodo();
         hijo.setEtiqueta("arreglo");
         hijo.setValor(t.image.toString());
         hijo.setTipo(tipo);
         hijo.agregarHijo(tamano);
         hijo.setNivel(nivelv);
         if(valor!=null){
         hijo.agregarHijo(valor);}
         r=hijo;
          }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case coma:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_3;
        }
        jj_consume_token(coma);
        t = jj_consume_token(ide);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case igual:
          jj_consume_token(igual);
          e = E();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
       if(t1==null){
        hijo=new nodo();
        hijo.setEtiqueta("variable");
        hijo.setTipo(tipo);
        hijo.setValor(t.image.toString());
        hijo.setNivel(nivelv);
        if(e!=null){
        hijo.agregarHijo(e);}
        r.agregarHijo(hijo);}
      }
      break;
    case ide:
      r = asingnacion();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// tipos de variables
  final public String tipoVariable() throws ParseException {
                       String aux=""; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case entero:
      t = jj_consume_token(entero);
               aux="entero";
      break;
    case decimal:
      t = jj_consume_token(decimal);
                 aux="decimal";
      break;
    case cadena:
      t = jj_consume_token(cadena);
                aux="cadena";
      break;
    case caracter:
      t = jj_consume_token(caracter);
                  aux="cacarter";
      break;
    case booleano:
      t = jj_consume_token(booleano);
                  aux="booleano";
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return aux;}
    throw new Error("Missing return statement in function");
  }

//asignar valor a variable
  final public nodo asingnacion() throws ParseException {
                    nodo r; nodo e; nodo  tamano=null; Token t;
    if (jj_2_2(2)) {
      t = jj_consume_token(ide);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case corchetea:
        tamano = tamanoV();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(igual);
      e = E();
        if (tamano==null){
        r= new nodo();
        r.setEtiqueta("valor variable");
        r.setValor(t.image.toString());
        r.agregarHijo(e);
        }
        else{
             r=new nodo();
       r.setEtiqueta("valor vector");
       r.setValor(t.image.toString());
       r.agregarHijo(tamano);
       r.agregarHijo(e);
       }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ide:
        r = ff();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// asignar tamoño vector
  final public nodo tamanoV() throws ParseException {
                nodo r; nodo tamano;
    jj_consume_token(corchetea);
    tamano = E();
    jj_consume_token(corchetec);
        r=new nodo();
        r.setEtiqueta("Tamano");
        r.agregarHijo(tamano);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case corchetea:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_4;
      }
      jj_consume_token(corchetea);
      tamano = E();
      jj_consume_token(corchetec);
         r.agregarHijo(tamano);
    }
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo valoresV() throws ParseException {
                 nodo r;
    jj_consume_token(llavea);
    r = C();
    jj_consume_token(llavec);
        {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo C() throws ParseException {
           nodo r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case verdadero:
    case falso:
    case cadenaS:
    case cadenaC:
    case ide:
    case numero:
    case parentecisa:
      r = C1();
      break;
    case llavea:
      r = C2();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo C1() throws ParseException {
            nodo r; nodo hijo;
    hijo = E();
        r=new nodo();
        r.setEtiqueta("Valores Vector");
        r.agregarHijo(hijo);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_5;
      }
      jj_consume_token(coma);
      hijo = E();
          r.agregarHijo(hijo);
    }
        {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo C2() throws ParseException {
           nodo r; nodo hijo;
    /*<llavea>*/ hijo = valoresV();
          r=new nodo();
          r.setEtiqueta("Lista valores");
          r.agregarHijo(hijo);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
      jj_consume_token(coma);
      /* <llavea>*/ hijo = valoresV();
            r.agregarHijo(hijo);
    }
        {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// operaciones logicas
  final public nodo logica() throws ParseException {
               nodo r; nodo r1; nodo r2;
    r1 = relacional2();
       r=new nodo();
       r.setEtiqueta("logica");
       r.agregarHijo(r1);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case or:
      case and:
      case nand:
      case nor:
      case xor:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case or:
        jj_consume_token(or);
        r2 = relacional2();
        r.agregarHijo(r2);
        r.setValor("or");
        break;
      case and:
        jj_consume_token(and);
        r2 = relacional2();
        r.agregarHijo(r2);
        r.setValor("and");
        break;
      case nand:
        jj_consume_token(nand);
        r2 = relacional2();
        r.agregarHijo(r2);
        r.setValor("nand");
        break;
      case nor:
        jj_consume_token(nor);
        r2 = relacional2();
        r.agregarHijo(r2);
        r.setValor("nor");
        break;
      case xor:
        jj_consume_token(xor);
        r2 = relacional2();
        r.agregarHijo(r2);
        r.setValor("xor");
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo relacional2() throws ParseException {
                    nodo r; nodo r1;
    if (jj_2_3(3)) {
      r1 = relacional();
       r=new nodo();
       r.setEtiqueta("logica");
       r.agregarHijo(r1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
        jj_consume_token(not);
        r1 = relacional();
       r=new nodo();
       r.setEtiqueta("logica");
       r.setValor("not");
        r.agregarHijo(r1);
        break;
      case parentecisa:
        jj_consume_token(parentecisa);
        r = logica();
        jj_consume_token(parentecisc);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

//opreciones relacionales
  final public nodo relacional() throws ParseException {
                   nodo r; String opp; nodo e1;nodo e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case verdadero:
    case falso:
    case cadenaS:
    case cadenaC:
    case ide:
    case numero:
    case parentecisa:
      e1 = E();
      opp = op();
      e2 = E();
      r=new nodo();
      r.setEtiqueta("relacion");
      r.agregarHijo(e1);
      r.agregarHijo(e2);
      r.setValor(opp);
      break;
    case igualigual:
    case diferente:
    case menor:
    case menorigual:
    case mayor:
    case mayorigual:
    case nulo:
      opp = op();
      e1 = E();
      r=new nodo();
      r.setEtiqueta("relacion");
      r.agregarHijo(e1);
      //r.agregarHijo(e2);
      r.setValor(opp);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

//nodo op
  final public String op() throws ParseException {
             String r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case igualigual:
      jj_consume_token(igualigual);
                r="==";
      break;
    case diferente:
      jj_consume_token(diferente);
              r="!=";
      break;
    case menor:
      jj_consume_token(menor);
          r="<";
      break;
    case menorigual:
      jj_consume_token(menorigual);
               r="<=";
      break;
    case mayor:
      jj_consume_token(mayor);
          r=">";
      break;
    case mayorigual:
      jj_consume_token(mayorigual);
               r=">=";
      break;
    case nulo:
      jj_consume_token(nulo);
          r="!&\u00a1";
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

//producciones de artimetiac y numeros
  final public nodo E() throws ParseException {
 nodo r; nodo t1; nodo t2; nodo op;
    t1 = T();
     r =new nodo();
     r.setEtiqueta("E");
     r.agregarHijo(t1);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mas:
      case menos:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mas:
        jj_consume_token(mas);
        t2 = T();
        op=new nodo();
        op.setEtiqueta("mas");
        r.agregarHijo(op);
        r.agregarHijo(t2);
        break;
      case menos:
        jj_consume_token(menos);
        t2 = T();
        op=new nodo();
        op.setEtiqueta("menos");
        r.agregarHijo(op);
        r.agregarHijo(t2);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo T() throws ParseException {
          nodo r; nodo f1; nodo f2; nodo op;
    f1 = I();
     r =new nodo();
     r.setEtiqueta("T");
     r.agregarHijo(f1);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case por:
      case divi:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case por:
        jj_consume_token(por);
        f2 = I();
        op=new nodo();
        op.setEtiqueta("por");
        r.agregarHijo(op);
        r.agregarHijo(f2);
        break;
      case divi:
        jj_consume_token(divi);
        f2 = I();
        op=new nodo();
        op.setEtiqueta("dividir");
        r.agregarHijo(op);
        r.agregarHijo(f2);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo I() throws ParseException {
          nodo r; nodo f1; nodo f2; nodo op;
    f1 = F();
          r=new nodo();
          r.setEtiqueta("I");
          r.agregarHijo(f1);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case potencia:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
      jj_consume_token(potencia);
      f2 = F();
             op=new nodo();
             op.setEtiqueta("potencia");
             r.agregarHijo(f1);
             r.agregarHijo(f2);
    }
        {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo F() throws ParseException {
           nodo r;  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
      t = jj_consume_token(numero);
      r=new nodo();
      r.setEtiqueta("numero");
      r.setValor(t.image.toString());
      break;
    case cadenaS:
      t = jj_consume_token(cadenaS);
        r=new nodo();
        r.setEtiqueta("cadena");
        r.setValor(t.image.toString());
      break;
    case cadenaC:
      t = jj_consume_token(cadenaC);
        r=new nodo();
        r.setEtiqueta("caracter");
        r.setValor(t.image.toString());
      break;
    case verdadero:
      t = jj_consume_token(verdadero);
        r=new nodo();
        r.setEtiqueta("verdadero");
        r.setValor(t.image.toString());
      break;
    case falso:
      t = jj_consume_token(falso);
        r=new nodo();
        r.setEtiqueta("falso");
        r.setValor(t.image.toString());
      break;
    case ide:
      r = VectorE();
      break;
    case parentecisa:
      jj_consume_token(parentecisa);
      r = E();
      jj_consume_token(parentecisc);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// reprecia a funcones y ids
  final public nodo VectorE() throws ParseException {
                Token t,t2=null; nodo tamano=null; nodo r;nodo parametros=null;
    t = jj_consume_token(ide);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case parentecisa:
    case corchetea:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case corchetea:
        tamano = tamanoV();
        break;
      case parentecisa:
        t2 = jj_consume_token(parentecisa);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case verdadero:
        case falso:
        case cadenaS:
        case cadenaC:
        case ide:
        case numero:
        case parentecisa:
          parametros = llparametro();
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        jj_consume_token(parentecisc);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
            if(tamano!=null){
            r=new nodo();
            r.setEtiqueta("valor vector pocion");
            r.setValor(t.image.toString());
            r.agregarHijo(tamano);
            }else if(t2!=null){
                r=new nodo();
                r.setEtiqueta("llamdaF");
                r.setValor(t.image.toString());
                if(parametros!=null){
                r.agregarHijo(parametros);}
            }else {
             r=new nodo();
             r.setEtiqueta("ide");
             r.setValor(t.image.toString());
         }
       {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// creacion de metodos y funciones
  final public nodo MetodoFuncion() throws ParseException {
                       nodo r; String tipo="null",nivelv=""; Token nombre;nodo cuerpoMF=null; nodo parametro=null;nodo retorno=null; String a="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case publico:
    case privado:
    case protegido:
      nivelv = nivel();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case conservar:
      jj_consume_token(conservar);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case entero:
    case decimal:
    case booleano:
    case caracter:
    case cadena:
      tipo = tipoVariable();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case corchetea:
      corchetesF();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    nombre = jj_consume_token(ide);
    jj_consume_token(parentecisa);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case entero:
    case decimal:
    case booleano:
    case caracter:
    case cadena:
      parametro = ListaParametors();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(parentecisc);
    jj_consume_token(abrir);
    cuerpoMF = listaSentecias();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case retornar:
      retorno = regreso();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(cerrar);
          if(tipo.equalsIgnoreCase("null")){
           r=new nodo();
           r.setEtiqueta("metodo");
           r.setValor(nombre.image.toString());
           if(parametro!=null){
           r.agregarHijo(parametro);}
           r.agregarHijo(cuerpoMF);


        }else{

           r=new nodo();
           r.setEtiqueta("funcion");
           r.setValor(nombre.image.toString());
           r.setTipo(tipo);
           if(parametro!=null){
           r.agregarHijo(parametro);}
           r.agregarHijo(cuerpoMF);
           if(retorno!=null){
           r.agregarHijo(retorno);}
         }
        {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public String corchetesF() throws ParseException {
                     String r;
    jj_consume_token(corchetea);
    jj_consume_token(corchetec);
        {if (true) return "si";}
    throw new Error("Missing return statement in function");
  }

  final public nodo ListaParametors() throws ParseException {
                        nodo r; String tipo; Token t;nodo hijo;
    tipo = tipoVariable();
    t = jj_consume_token(ide);
                r=new nodo();
                r.setEtiqueta("lista parametros");
                hijo =new nodo();
                hijo.setEtiqueta("parametro");
                hijo.setValor(t.image.toString());
                r.agregarHijo(hijo);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_11;
      }
      jj_consume_token(coma);
      tipo = tipoVariable();
      t = jj_consume_token(ide);
                 hijo =new nodo();
                hijo.setEtiqueta("parametro");
                hijo.setValor(t.image.toString());
                r.agregarHijo(hijo);
    }
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo regreso() throws ParseException {
                 nodo r; Token t;
    jj_consume_token(retornar);
    t = jj_consume_token(ide);
    jj_consume_token(fin);
            r=new nodo();
            r.setEtiqueta("retorno");
            r.setValor(t.image.toString());
         {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// lisa de sentencias
  final public nodo listaSentecias() throws ParseException {
                       nodo r; nodo hijo;
    hijo = sentencia();
            r=new nodo();
            r.setEtiqueta("lista sentecias");
            r.agregarHijo(hijo);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case publico:
      case privado:
      case protegido:
      case conservar:
      case var:
      case si:
      case comprobar:
      case salir:
      case continuar:
      case para:
      case mientras:
      case hacer:
      case pintarP:
      case pintarOR:
      case pintarS:
      case ordenar:
      case ide:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_12;
      }
      hijo = sentencia();
         r.agregarHijo(hijo);
    }
       {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo sentencia() throws ParseException {
                   nodo r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case si:
      r = si();
      break;
    case comprobar:
      r = comprobar();
      break;
    case para:
      r = paracada();
      break;
    case hacer:
      r = hacermientras();
      break;
    case mientras:
      r = mientras();
      break;
    case publico:
    case privado:
    case protegido:
    case conservar:
    case var:
    case ide:
      r = variable();
      jj_consume_token(fin);
      break;
    case pintarOR:
      r = pintaror();
      break;
    case pintarS:
      r = pintarss();
      break;
    case pintarP:
      r = pintarpunto();
      break;
    case salir:
      r = ssalida();
      jj_consume_token(fin);
      break;
    case continuar:
      r = scontinuar();
      jj_consume_token(fin);
      break;
    case ordenar:
      r = ordenarV();
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

//sentencia if 
  final public nodo si() throws ParseException {
           nodo r; nodo hijo; nodo sen=null; nodo condi;
    jj_consume_token(si);
    jj_consume_token(parentecisa);
    condi = logica();
    jj_consume_token(parentecisc);
    jj_consume_token(abrir);
    sen = listaSentecias();
    jj_consume_token(cerrar);
           r=new nodo();
           r.setEtiqueta("si");
           r.agregarHijo(condi);
           r.agregarHijo(sen);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case sino:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_13;
      }
      jj_consume_token(sino);
      jj_consume_token(parentecisa);
      condi = logica();
      jj_consume_token(parentecisc);
      jj_consume_token(abrir);
      sen = listaSentecias();
      jj_consume_token(cerrar);
           hijo=new nodo();
           hijo.setEtiqueta("sino");
           hijo.agregarHijo(condi);
           hijo.agregarHijo(sen);
           r.agregarHijo(hijo);
    }
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

//sentencia comprobar
  final public nodo comprobar() throws ParseException {
                  nodo r; nodo buscar; nodo hijo;
    jj_consume_token(comprobar);
    jj_consume_token(parentecisa);
    buscar = E();
    jj_consume_token(parentecisc);
    jj_consume_token(abrir);
    hijo = lcomprobar();
    jj_consume_token(cerrar);
        r=new nodo();
        r.setEtiqueta("comprobar");
        r.agregarHijo(buscar);
        r.agregarHijo(hijo);
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo lcomprobar() throws ParseException {
                    nodo r =new nodo(); r.setEtiqueta("lista casos"); nodo hijo; nodo var; Token t=null; nodo sen;
    jj_consume_token(caso);
    var = E();
    jj_consume_token(dospuntos);
    sen = listaSentecias();
           hijo =new nodo();
           hijo.setEtiqueta("caso");
           hijo.agregarHijo(var);
           hijo.agregarHijo(sen);
           r.agregarHijo(hijo);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case caso:
      case defecto:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case caso:
        jj_consume_token(caso);
        var = E();
        jj_consume_token(dospuntos);
        sen = listaSentecias();
           hijo =new nodo();
           hijo.setEtiqueta("caso");
           hijo.agregarHijo(var);
            hijo.agregarHijo(sen);
          r.agregarHijo(hijo);
        break;
      case defecto:
        jj_consume_token(defecto);
        jj_consume_token(dospuntos);
        sen = listaSentecias();
                hijo =new nodo();
                hijo.setEtiqueta("defavol");
                 hijo.agregarHijo(sen);
                r.agregarHijo(hijo);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

//sentencia paracada
  final public nodo paracada() throws ParseException {
                 nodo r; nodo vari; nodo condi;nodo f; nodo sen;
    jj_consume_token(para);
    jj_consume_token(parentecisa);
    vari = variable();
    jj_consume_token(puntoycoma);
    condi = logica();
    jj_consume_token(puntoycoma);
    f = ff();
    jj_consume_token(parentecisc);
    jj_consume_token(abrir);
    sen = listaSentecias();
    jj_consume_token(cerrar);
         r=new nodo();
        r.setEtiqueta("paracada");
        r.agregarHijo(vari);
        r.agregarHijo(condi);
        r.agregarHijo(f);
        r.agregarHijo(sen);
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo ff() throws ParseException {
            Token t,t2; nodo tt; String nom; String eti;nodo e=null;
    if (jj_2_4(2)) {
      t = jj_consume_token(ide);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case aumento:
        t2 = jj_consume_token(aumento);
        break;
      case decremento:
        t2 = jj_consume_token(decremento);
        break;
      case sumas:
        t2 = jj_consume_token(sumas);
        break;
      case restas:
        t2 = jj_consume_token(restas);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case verdadero:
      case falso:
      case cadenaS:
      case cadenaC:
      case ide:
      case numero:
      case parentecisa:
        e = E();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
            nom=t.image.toString();
            eti=t2.image.toString();
          if(e==null){
            if(eti.equals("++"))
            {
               tt=new nodo();
               tt.setEtiqueta("Aumento");
               tt.setValor(nom);
            }
            else{
                tt=new nodo();
                tt.setEtiqueta("decremento");
                tt.setValor(nom);
                }
         }else {
            if(eti.equals("+="))
            {
               tt=new nodo();
               tt.setEtiqueta("sumas");
               tt.setValor(nom);
               tt.agregarHijo(e);
            }
            else{
                tt=new nodo();
                tt.setEtiqueta("restas");
                tt.setValor(nom);
                tt.agregarHijo(e);
                }

             }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ide:
        tt = llamarMF();
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return tt;}
    throw new Error("Missing return statement in function");
  }

// do while
  final public nodo hacermientras() throws ParseException {
                       nodo r; nodo sen ; nodo cond;
    jj_consume_token(hacer);
    jj_consume_token(abrir);
    sen = listaSentecias();
    jj_consume_token(cerrar);
    jj_consume_token(mientras);
    jj_consume_token(parentecisa);
    cond = logica();
    jj_consume_token(parentecisc);
    jj_consume_token(fin);
            r=new nodo();
            r.setEtiqueta("hacermientras");
            r.agregarHijo(sen);
            r.agregarHijo(cond);
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo mientras() throws ParseException {
                 nodo r; nodo sen; nodo cond;
    jj_consume_token(mientras);
    jj_consume_token(parentecisa);
    cond = logica();
    jj_consume_token(parentecisc);
    jj_consume_token(abrir);
    sen = listaSentecias();
    jj_consume_token(cerrar);
             r=new nodo();
            r.setEtiqueta("mientras");
            r.agregarHijo(cond);
            r.agregarHijo(sen);
      {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo llamarMF() throws ParseException {
                 nodo r; nodo parametros=null;
    jj_consume_token(ide);
    jj_consume_token(parentecisa);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case verdadero:
    case falso:
    case cadenaS:
    case cadenaC:
    case ide:
    case numero:
    case parentecisa:
      parametros = llparametro();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    jj_consume_token(parentecisc);
        r=new nodo();
        r.setEtiqueta("llamarM");
        if(parametros!=null){
        r.agregarHijo(parametros);}
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo llparametro() throws ParseException {
                    nodo r =new nodo(); r.setEtiqueta("llParametos"); nodo hijo;
    hijo = E();
            r.agregarHijo(hijo);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_15;
      }
      jj_consume_token(coma);
      hijo = E();
                r.agregarHijo(hijo);
    }
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// Pintar_P(posición en X, posición en Y, color, Diámetro)$
/*<pintarP: "Pintar_P">
| <pintarOR :"Pintar_OR">
| <pintarS : "Pintar_S">
| <principal :"Principal">*/
  final public nodo pintarpunto() throws ParseException {
                    nodo r; nodo x;nodo y; Token t; nodo d;
    jj_consume_token(pintarP);
    jj_consume_token(parentecisa);
    x = E();
    jj_consume_token(coma);
    y = E();
    jj_consume_token(coma);
    t = jj_consume_token(cadenaS);
    jj_consume_token(coma);
    d = E();
    jj_consume_token(parentecisc);
    jj_consume_token(fin);
            r=new nodo();
            r.setEtiqueta("punto");
            r.setValor(t.image.toString());
            r.agregarHijo(x);
            r.agregarHijo(y);
            r.agregarHijo(d);
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

//Pintar_OR(posición en X, posición en Y, color, Ancho, Alto, figura)$
  final public nodo pintaror() throws ParseException {
                 nodo r; nodo x;nodo y; Token t,t2; nodo an; nodo al;
    jj_consume_token(pintarOR);
    jj_consume_token(parentecisa);
    x = E();
    jj_consume_token(coma);
    y = E();
    jj_consume_token(coma);
    t = jj_consume_token(cadenaS);
    jj_consume_token(coma);
    an = E();
    jj_consume_token(coma);
    al = E();
    jj_consume_token(coma);
    t2 = jj_consume_token(cadenaC);
    jj_consume_token(parentecisc);
    jj_consume_token(fin);
            r=new nodo();
            r.setEtiqueta("or");
            r.setValor(t.image.toString());
            r.agregarHijo(x);
            r.agregarHijo(y);
            r.agregarHijo(an);
            r.agregarHijo(al);
            r.setTipo(t2.image.toString());
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

//Pintar_S(100,100, “#000000”, “Hola mundo”)$
  final public nodo pintarss() throws ParseException {
                 nodo r; nodo x; nodo y,d; Token t,t2;
    jj_consume_token(pintarS);
    jj_consume_token(parentecisa);
    x = E();
    jj_consume_token(coma);
    y = E();
    jj_consume_token(coma);
    t = jj_consume_token(cadenaS);
    jj_consume_token(coma);
    t2 = jj_consume_token(cadenaS);
    jj_consume_token(parentecisc);
    jj_consume_token(fin);
         r=new nodo();
            r.setEtiqueta("cadena");
            r.setValor(t.image.toString());
            r.agregarHijo(x);
            r.agregarHijo(y);
            r.setTipo(t2.image.toString());
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo principal() throws ParseException {
                  nodo r; nodo metodos;
    jj_consume_token(principal);
    jj_consume_token(parentecisa);
    jj_consume_token(parentecisc);
    jj_consume_token(abrir);
    metodos = listaSentecias();
    jj_consume_token(cerrar);
        r=new nodo();
        r.setEtiqueta("principal");
        r.agregarHijo(metodos);
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo ssalida() throws ParseException {
                nodo r;
    jj_consume_token(salir);
            r=new nodo();
            r.setEtiqueta("salir");
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public nodo scontinuar() throws ParseException {
                   nodo r;
    jj_consume_token(continuar);
             r=new nodo();
            r.setEtiqueta("continuar");
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

//Ordenar (arreglo <arreglo a ordenar>,tipo <forma de ordenar>)
 /*
    | <ordenar : "Ordenar">
| <asendente: "ascendente">
| <descendente :"descendente">
| <pares :"pares">
| <impares: "impares">
| <primos :"primos">
*/
  final public nodo ordenarV() throws ParseException {
                 nodo r;Token t; String orden;
    jj_consume_token(ordenar);
    jj_consume_token(parentecisa);
    t = jj_consume_token(ide);
    orden = tipoOrden();
    jj_consume_token(parentecisc);
    jj_consume_token(fin);
        r=new nodo();
        r.setEtiqueta("ordenar v");
        r.setValor(t.image.toString());
        r.setTipo(orden);
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

//ss
  final public String tipoOrden() throws ParseException {
                    String r; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case asendente:
      t = jj_consume_token(asendente);
                      r=t.image.toString();
      break;
    case descendente:
      t = jj_consume_token(descendente);
                         r=t.image.toString();
      break;
    case pares:
      t = jj_consume_token(pares);
                   r=t.image.toString();
      break;
    case impares:
      t = jj_consume_token(impares);
                     r=t.image.toString();
      break;
    case primos:
      t = jj_consume_token(primos);
                    r=t.image.toString();
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_35() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(parentecisa)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(parentecisc)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(falso)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(menos)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(verdadero)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(mas)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(corchetea)) return true;
    if (jj_scan_token(corchetec)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(cadenaC)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(ide)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(cadenaS)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(corchetea)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(numero)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(nulo)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(mayorigual)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(mayor)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(menorigual)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(menor)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(igualigual)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(diferente)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(potencia)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    if (jj_scan_token(ide)) return true;
    if (jj_scan_token(parentecisa)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(parentecisa)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_scan_token(parentecisc)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_29()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(ide)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    if (jj_scan_token(igual)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_28()) return true;
    if (jj_3R_29()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(booleano)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(caracter)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(cadena)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(decimal)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(divi)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(entero)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(por)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(ide)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public analizadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[54];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7000,0x8000,0x7000,0x0,0x37000,0xe0037000,0x7000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x37000,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7000,0x10000,0xe0000000,0x0,0xe0000000,0x10000000,0x0,0xf977000,0xf977000,0x80000,0x600000,0x600000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x40,0x43,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x1f00000,0x1f00000,0x2000000,0xfe000,0xfe000,0xc000000,0xc000000,0x30000000,0x30000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x3,0x0,0x0,0xb8,0xb8,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x1f00,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x10000,0x80,0x2080,0x0,0x0,0x0,0x2000,0x1009f8,0x40000,0x10000,0x40000,0x80,0x0,0x2000,0x80,0x2000,0x1009f8,0x10000,0x10000,0x0,0x0,0x800,0x9f8,0x0,0x0,0x0,0x0,0x0,0x0,0x9f8,0x9f8,0x2800,0x2800,0x0,0x0,0x0,0x2000,0x0,0x0,0x10000,0x80,0x80,0x0,0x0,0x0,0x7,0x9f8,0x80,0x9f8,0x10000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public analizador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public analizador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public analizador(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[87];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 54; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 87; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
